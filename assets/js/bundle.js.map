{"version":3,"sources":["webpack:///webpack/bootstrap d896c44612d7ac47c088","webpack:///./assets/js/mapMaker.js","webpack:///./assets/js/tileSet.js","webpack:///./assets/js/constants.js","webpack:///./assets/js/debounce.js","webpack:///./assets/js/drawGrid.js","webpack:///./assets/js/tileMap.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,IAAG;AACH;;AAEA;;;;;;;ACZA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,+BAA+B;AACtE,yCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC9EA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC1BA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA,kBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB,oBAAmB,kBAAkB;AACrC;AACA,sBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAgB,QAAQ;;AAExB;AACA;AACA;;AAEA;AACA;AACA,wDAAuD,QAAQ;;AAE/D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d896c44612d7ac47c088\n **/","const TileSet = require('./tileSet');\nconst TileMap = require('./tileMap');\n\nfunction documentReady () {\n  const tileSet = new TileSet($('.tile-set')[0], '/imgs/tile-set0.png');\n  const tileMap = new TileMap($('.tile-map')[0], 10, 10, tileSet);\n\n  $(tileMap.canvas).mouseup(function (e) {\n\n  });\n}\n\n$(documentReady);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/mapMaker.js\n ** module id = 0\n ** module chunks = 0\n **/","const Constants = require('./constants');\nconst CANVAS_TILE_SIZE = Constants.TILE_SIZE * Constants.CANVAS_SCALE;\nconst debounce = require('./debounce');\nconst drawGrid = require('./drawGrid');\n\nclass TileSet {\n  constructor (canvas, imgSrc) {\n    this.canvas = canvas;\n\n    // load image\n    this.image = new Image();\n    this.image.crossOrigin = \"anonymous\";\n    this.image.src = imgSrc;\n    this.image.onload = this.onImageLoad.bind(this);\n  }\n  onImageLoad () {\n    // set width/height\n    this.canvas.width = this.image.width * Constants.CANVAS_SCALE;\n    this.canvas.height = this.image.height * Constants.CANVAS_SCALE;\n\n    // draw tile image to scale\n    const ctx = this.canvas.getContext('2d');\n    ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height);\n\n    // draw grid\n    this.numCols = Math.floor(this.image.width / Constants.TILE_SIZE);\n    this.numRows = Math.floor(this.image.height / Constants.TILE_SIZE);\n    drawGrid(this.canvas, this.numCols, this.numRows);\n\n    // listen for clicks\n    $(this.canvas).mousedown(this.tileClicked.bind(this));\n  }\n  tileClicked (e) {\n    // create a new canvas element for clicked tile\n    const clickX = e.pageX - $(this.canvas).offset().left;\n    const clickY = e.pageY - $(this.canvas).offset().top;\n    const col = Math.floor(clickX / CANVAS_TILE_SIZE);\n    const row = Math.floor(clickY / CANVAS_TILE_SIZE);\n    this.dragableTile = this.tileAt(col, row);\n    this.tileIndex = (row * this.numCols) + col;\n\n    $('body').append(this.dragableTile);\n    this.snapTileToMouse(e);\n    $(document).mousemove(debounce(this.tileDragged.bind(this), 75));\n    $(document).mouseup(this.tileDropped.bind(this));\n  }\n  snapTileToMouse (e) {\n    $(this.dragableTile).css('top', `${e.pageY - CANVAS_TILE_SIZE / 2}px`);\n    $(this.dragableTile).css('left', `${e.pageX - CANVAS_TILE_SIZE / 2}px`);\n  }\n  tileDragged (e) {\n    this.snapTileToMouse(e);\n  }\n  tileDropped (e) {\n    // $(document).off('mousemove mouseup');\n    $('.dragable-tile').remove();\n  }\n  tileAt (col, row) {\n    const ctx = this.canvas.getContext('2d');\n\n    // extract tile image\n    const imageData = ctx.getImageData(col * CANVAS_TILE_SIZE, row * CANVAS_TILE_SIZE,\n                              CANVAS_TILE_SIZE, CANVAS_TILE_SIZE);\n\n    // create tile element\n    const tile = document.createElement('canvas');\n    tile.width = CANVAS_TILE_SIZE;\n    tile.height = CANVAS_TILE_SIZE;\n    tile.classList.add('dragable-tile');\n\n    // draw tile image\n    const tileCtx = tile.getContext('2d');\n    tileCtx.putImageData(imageData, 0, 0);\n\n    return tile;\n  }\n}\n\nmodule.exports = TileSet;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/tileSet.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = {\n  TILE_SIZE: 16,\n  CANVAS_SCALE: 2\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/constants.js\n ** module id = 2\n ** module chunks = 0\n **/","function debounce (fn, waitTime) {\n  let waiting = false;\n  let mostRecentArgs;\n  const makeCall = function (arguements) {\n    fn(...arguements);\n    waiting = true;\n    mostRecentArgs = null;\n\n    setTimeout(function () {\n      if (mostRecentArgs) {\n        makeCall(mostRecentArgs);\n      } else {\n        waiting = false;\n      }\n    }, waitTime);\n  };\n\n  return function (...args) {\n    if (waiting) {\n      mostRecentArgs = args.slice();\n    } else {\n      makeCall(args);\n    }\n  };\n}\n\nmodule.exports = debounce;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/debounce.js\n ** module id = 4\n ** module chunks = 0\n **/","const Constants = require('./constants');\nconst CANVAS_TILE_SIZE = Constants.TILE_SIZE * Constants.CANVAS_SCALE;\n\nfunction drawGrid (canvas, numCols, numRows) {\n  // check element type\n  if (canvas.tagName !== 'CANVAS') {\n    throw new Error('must be canvas element');\n  }\n\n  // draw grid\n  const ctx = canvas.getContext('2d');\n  ctx.strokeStyle = '#000';\n  ctx.lineWidth = 2.0;\n\n  for (let i = 1; i < numCols; i++) {\n    ctx.beginPath();\n    ctx.moveTo(i * CANVAS_TILE_SIZE, 0);\n    ctx.lineTo(i * CANVAS_TILE_SIZE, CANVAS_TILE_SIZE * numRows);\n    ctx.stroke();\n  }\n  for (let i = 1; i < numRows; i++) {\n    ctx.beginPath();\n    ctx.moveTo(0, i * CANVAS_TILE_SIZE);\n    ctx.lineTo(CANVAS_TILE_SIZE * numCols, i * CANVAS_TILE_SIZE);\n    ctx.stroke();\n  }\n};\n\nmodule.exports = drawGrid;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/drawGrid.js\n ** module id = 8\n ** module chunks = 0\n **/","const Constants = require('./constants');\nconst CANVAS_TILE_SIZE = Constants.TILE_SIZE * Constants.CANVAS_SCALE;\nconst drawGrid = require('./drawGrid');\n\nclass TileMap {\n  constructor (canvas, numRows, numCols, tileSet) {\n    this.canvas = canvas;\n    this.tileSet = tileSet;\n    this.numCols = numCols;\n    this.numRows = numRows;\n\n    // map store\n    this.mapStore = {numCols: this.numCols, numRows: this.numRows, mapData: []};\n    for (var i = 0; i < this.numRows; i++) {\n      const row = [];\n      for (var j = 0; j < this.numCols; j++) {\n        row.push(-1);\n      }\n      this.mapStore.mapData.push(row);\n    }\n    $('#map-store').text(JSON.stringify(this.mapStore));\n\n    // set width/height\n    this.canvas.width = numCols * CANVAS_TILE_SIZE;\n    this.canvas.height = numRows * CANVAS_TILE_SIZE;\n\n    // draw grid\n    drawGrid(this.canvas, this.numCols, this.numRows);\n\n    $(document).mouseup(this.droppedTile.bind(this));\n  }\n  droppedTile (e) {\n    // get tile being dragged\n    const tile = this.tileSet.dragableTile;\n    if (!tile) { return; }\n\n    // get mouse location\n    const mouseX = e.pageX - $(this.canvas).offset().left;\n    const mouseY = e.pageY - $(this.canvas).offset().top;\n\n    // check that mouse is over map\n    if (mouseX < 0 || mouseX >= this.canvas.width ||\n          mouseY < 0 || mouseY >= this.canvas.height) { return; }\n\n    // add tile to canvas\n    const col = Math.floor(mouseX / CANVAS_TILE_SIZE);\n    const row = Math.floor(mouseY / CANVAS_TILE_SIZE);\n    this.drawTileAt(tile, col, row);\n\n    // add tile to store\n    this.mapStore.mapData[row][col] = this.tileSet.tileIndex;\n    $('#map-store').text(JSON.stringify(this.mapStore));\n\n    this.tileSet.dragableTile = null;\n    this.tileSet.tileIndex = -1;\n  }\n  drawTileAt (tile, col, row) {\n    // extract tile image\n    const tileCtx = tile.getContext('2d');\n    const imageData = tileCtx.getImageData(0, 0, CANVAS_TILE_SIZE, CANVAS_TILE_SIZE);\n\n    // draw image\n    const ctx = this.canvas.getContext('2d');\n    ctx.putImageData(imageData, col * CANVAS_TILE_SIZE, row * CANVAS_TILE_SIZE);\n\n    // draw grid\n    drawGrid(this.canvas, this.numCols, this.numRows);\n  }\n}\n\nmodule.exports = TileMap;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/js/tileMap.js\n ** module id = 9\n ** module chunks = 0\n **/"],"sourceRoot":""}